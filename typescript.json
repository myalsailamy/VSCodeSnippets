{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mys-modules-default-imports": {
		"prefix": "mys-modules-default-imports",
		"body": [
		  "CommonModule,",
		  "FormsModule,",
		  "ReactiveFormsModule,",
		  "NgxTablePaginationModule,",
		  "SpinnerContainerModule,",
		  "TranslateModule,",
		  "TimeAgoModule,",
		  "AppDirectivesModule,",
		  "TableToolsModule,",
		  "NgbModalModule,",
		  "NgbNavModule,",
		  "DragDropModule,"
		],
		"description": "mys-modules-default-imports"
	  },











	  
	"ramez-import-default-modules": {
		"prefix": "ramez-import-default-modules",
		"body": [
			"\t\tCommonModule,",
			"\t\tTranslateModule,",
			"\t\tReactiveFormsModule,",
			"\t\tFlexLayoutModule,",
			"\t\tToLocalDateModule,",
			"\t\tRequiredAsteriskModule,",
			"\t\tCommonMatcomponentsModule,",
			"\t\tRoleAndClaimModule,",
			"\t\tShimmerLoadingModule,",
			"\t\tMatDialogModule,\n",
		],
		"description": "add default modules"
	},
	"ramez-entity-resolver": {
		"prefix": "ramez-entity-resolver",
		"body": [
		  "@Injectable({",
		  "  providedIn: 'root',",
		  "})",
		  "export class ${1:SingularEntityName}Resolver implements Resolve<ApiResponse<I${1:SingularEntityName}Response> | null>",
		  "{",
		  "  constructor(private router: Router, private sc: ${2:PluralEntityName}Service) { }",
		  "",
		  "  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ApiResponse<I${1:SingularEntityName}Response> | null> {",
		  "    const id = route.params['id'];",
		  "    return this.sc.get${1:SingularEntityName}(id).pipe(",
		  "      catchError((error) => {",
		  "        let errorMessage = 'Unknown error occured.';",
		  "        if (error.error instanceof ErrorEvent) {",
		  "          //Client side error",
		  "          errorMessage = error.error.message;",
		  "        } else {",
		  "          errorMessage = error.error.errorMessage;",
		  "          console.log(error);",
		  "        }",
		  "        this.router.navigate(['/not-found'], { queryParams: { error: errorMessage }, });",
		  "        return of(null);",
		  "      })",
		  "    );",
		  "  }",
		  "}"
		],
		"description": "ramez-entity-resolver"
	  },
	  "ramez-entity-service": {
		"prefix": "ramez-entity-service",
		"body": [
		  "    private baseUrl = `${environment.baseUrl}/masters/api/v1`;",
		  "    ${1/(.)/${1:/downcase}/}Url = `${this.baseUrl}/${1/(.)/${1:/downcase}/}`;",
		  "  ",
		  "    constructor(private http: HttpClient) { }",
		  "  ",
		  "    get${1:pluralEntityName}(",
		  "      {",
		  "        sortColumn = '',",
		  "        sortOrder = SortDirection.asc,",
		  "        pageNumber = 1,",
		  "        pageSize = 10,",
		  "        query = { name: '', id: '' }",
		  "      }: ApiFilterRequest<I${2:SingularEntityName}Filter>): Observable<ApiPagedResponse<I${2/(.)/${1:/capitalize}/}TableRow>> {",
		  "      return this.http.get<ApiPagedResponse<I${2/(.)/${1:/capitalize}/}TableRow>>(this.${1/(.)/${1:/downcase}/}Url, {",
		  "        params: new HttpParams()",
		  "          .set('name', query.name ?? '')",
		  "          .set('id', query.id ?? '')",
		  "          .set('sortColumn', sortColumn)",
		  "          .set('sortOrder', sortOrder)",
		  "          .set('pageNumber', pageNumber.toString())",
		  "          .set('pageSize', pageSize.toString()),",
		  "      }).pipe(map((res) => res));",
		  "    }",
		  "  ",
		  "    get${2/(.)/${1:/capitalize}/}(id: string): Observable<ApiResponse<I${2/(.)/${1:/capitalize}/}Response>> {",
		  "      return this.http",
		  "        .get<ApiResponse<I${2/(.)/${1:/capitalize}/}Response>>(`${this.${1/(.)/${1:/downcase}/}Url}/\\${id}`, {",
		  "          params: new HttpParams().set('id', id),",
		  "        }).pipe(map((res) => res));",
		  "    }",
		  "  ",
		  "    get${2/(.)/${1:/capitalize}/}DD({ name = '', id = '' }: I${2/(.)/${1:/capitalize}/}Filter): Observable<ApiResponse<I${2/(.)/${1:/capitalize}/}KeyValuePair[]>> {",
		  "      return this.http.get<ApiResponse<I${2/(.)/${1:/capitalize}/}KeyValuePair[]>>(`${this.${1/(.)/${1:/downcase}/}Url}/list`, {",
		  "        params: new HttpParams().set('name', name).set('id', id),",
		  "        headers: { skiploading: 'true' },",
		  "      }).pipe(map((res) => res));",
		  "    }",
		  "  ",
		  "    create${2/(.)/${1:/capitalize}/}(${2/(.)/${1:/downcase}/}: I${2/(.)/${1:/capitalize}/}Create): Observable<ApiResponse<I${2/(.)/${1:/capitalize}/}TableRow>> {",
		  "      return this.http.post<ApiResponse<I${2/(.)/${1:/capitalize}/}TableRow>>(this.${1/(.)/${1:/downcase}/}Url, ${2/(.)/${1:/downcase}/}).pipe(map((res) => res));",
		  "    }",
		  "  ",
		  "    update${2/(.)/${1:/capitalize}/}(id: string, ${2/(.)/${1:/downcase}/}: I${2/(.)/${1:/capitalize}/}Update): Observable<ApiResponse<boolean>> {",
		  "      return this.http.put<ApiResponse<boolean>>(`${this.${1/(.)/${1:/downcase}/}Url}/\\${id}`, ${2/(.)/${1:/downcase}/}, {",
		  "        params: new HttpParams().set('id', id),",
		  "      }).pipe(map((res) => res));",
		  "    }",
		  "  ",
		  "    delete${2/(.)/${1:/capitalize}/}(id: string): Observable<ApiResponse<boolean>> {",
		  "      return this.http.delete<ApiResponse<boolean>>(`${this.${1/(.)/${1:/downcase}/}Url}/\\${id}`, {",
		  "        params: new HttpParams().set('id', id),",
		  "      }).pipe(map((res) => res));",
		  "    }",
		  "  ${3}"
		],
		"description": "ramez-entity-service"
	  },
	  "ramez-entity-data-source": {
		"prefix": "ramez-entity-data-source",
		"body": [
		  "export class ${1:SingularEntityName}DataSource implements DataSource<I${1/(.)/${1:/capitalize}/}TableRow> {",
		  "    private ${1/(.)/${1:/downcase}/}Subject = new BehaviorSubject<I${1/(.)/${1:/capitalize}/}TableRow[]>([]);",
		  "",
		  "    private loadingSubject = new BehaviorSubject<boolean>(false);",
		  "    public loading$ = this.loadingSubject.asObservable();",
		  "",
		  "    private lengthSubject = new BehaviorSubject<number>(0);",
		  "    public length$ = this.lengthSubject.asObservable();",
		  "",
		  "    constructor(private ${2/(.)/${1:/downcase}/}Service: ${2:PluralEntityName}Service) { }",
		  "",
		  "    load${2/(.)/${1:/capitalize}/}({",
		  "        sortColumn = '',",
		  "        sortOrder = SortDirection.asc,",
		  "        pageNumber = 1,",
		  "        pageSize = 10,",
		  "        query = { name: '', id: '' },",
		  "    }: ApiFilterRequest<I${1/(.)/${1:/capitalize}/}Filter>) {",
		  "        this.loadingSubject.next(true);",
		  "        this.${2/(.)/${1:/downcase}/}Service",
		  "            .get${2/(.)/${1:/capitalize}/}({",
		  "                sortColumn: sortColumn,",
		  "                sortOrder: sortOrder,",
		  "                pageNumber: pageNumber,",
		  "                pageSize: pageSize,",
		  "                query: { name: query.name, id: query.id },",
		  "            })",
		  "            .pipe(",
		  "                catchError(() => of([])),",
		  "                finalize(() => this.loadingSubject.next(false))",
		  "            )",
		  "            .subscribe((result: never[] | ApiPagedResponse<I${1/(.)/${1:/capitalize}/}TableRow>) => {",
		  "                let res = result as ApiPagedResponse<I${1/(.)/${1:/capitalize}/}TableRow>;",
		  "                // console.log(result);",
		  "                this.lengthSubject.next(res.totalRecords ?? 0);",
		  "                this.${1/(.)/${1:/downcase}/}Subject.next(res.data);",
		  "            });",
		  "    }",
		  "",
		  "    connect(): Observable<I${1/(.)/${1:/capitalize}/}TableRow[]> {",
		  "        return this.${1/(.)/${1:/downcase}/}Subject.asObservable();",
		  "    }",
		  "",
		  "    disconnect(collectionViewer: CollectionViewer): void {",
		  "        this.${1/(.)/${1:/downcase}/}Subject.complete();",
		  "        this.loadingSubject.complete();",
		  "        this.lengthSubject.complete();",
		  "    }",
		  "}"
		],
		"description": "ramez-entity-data-source"
	  },
	  "ramez-Key-Value-Pair-Properties": {
		"prefix": "ramez-Key-Value-Pair-Properties",
		"body": [
		  "  key?: string;",
		  "  value?: string;"
		],
		"description": "ramez-Key-Value-Pair-Properties"
	  },
	  "ramez-Filter-Properties": {
		"prefix": "ramez-Filter-Properties",
		"body": [
		  "  code?: string;",
		  "  name?: string;"
		],
		"description": "ramez-Filter-Properties"
	  },
	  "ramez-list-component": {
		"prefix": "ramez-list-component",
		"body": [
		  "  @ViewChild(MatPaginator, { static: false }) paginator!: MatPaginator;",
		  "  @ViewChild(MatSort, { static: false }) sort!: MatSort;",
		  "  _componentDestroyed = new Subject<any>();",
		  "  dataSource!: ${1:SingularEntityName}DataSource;",
		  "  displayedColumns = ${3:['Code', 'Name', 'actions'];}",
		  "  searchKeyCtrl = new FormControl();",
		  "  isLoading = false;",
		  "  editRowIndex: number = -1;",
		  "  deleteRowIndex: number = -1;",
		  "  deletedMsg: string = '';",
		  "  dir: Direction = 'ltr';",
		  "",
		  "  constructor(private ${2/(.)/${1:/downcase}/}Service: ${2:PluralEntityName}Service, private dialog: MatDialog,",
		  "    private dialogSC: ConfirmDialogService, private snackbarService: SnackbarService,",
		  "    private translate: TranslateService) { }",
		  "",
		  "  ngOnInit(): void {",
		  "    this.dir = this.translate.currentLang == 'ar' ? 'rtl' : 'ltr';",
		  "    this.dataSource = new ${1/(.)/${1:/capitalize}/}DataSource(this.${2/(.)/${1:/downcase}/}Service);",
		  "    this.dataSource.load${2/(.)/${1:/capitalize}/}({",
		  "      query: { name: '' },",
		  "      sortColumn: '${4:propertyCode}',",
		  "      sortOrder: SortDirection.asc,",
		  "      pageNumber: 1,",
		  "      pageSize: 10,",
		  "    });",
		  "    this.translate.get(['Successfully Deleted']).subscribe((translations) => {",
		  "      this.deletedMsg = translations['Successfully Deleted'];",
		  "    });",
		  "  }",
		  "",
		  "  ngAfterViewInit() {",
		  "    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));",
		  "    this.searchKeyCtrl.valueChanges",
		  "      .pipe(",
		  "        debounceTime(300),",
		  "        tap(() => {",
		  "          this.paginator.pageIndex = 0;",
		  "          this.loadPage();",
		  "        }),",
		  "        takeUntil(this._componentDestroyed)",
		  "      ).subscribe();",
		  "",
		  "    merge(this.sort.sortChange, this.paginator.page)",
		  "      .pipe(",
		  "        tap(() => {",
		  "          this.loadPage();",
		  "        }),",
		  "        takeUntil(this._componentDestroyed)",
		  "      ).subscribe();",
		  "  }",
		  "",
		  "  loadPage() {",
		  "    this.dataSource.load${2/(.)/${1:/capitalize}/}({",
		  "      query: { name: this.searchKeyCtrl.value ?? '' },",
		  "      sortColumn: this.sort.active,",
		  "      sortOrder:",
		  "        this.sort.direction == 'asc' ? SortDirection.asc : SortDirection.desc,",
		  "      pageNumber: this.paginator.pageIndex + 1,",
		  "      pageSize: this.paginator.pageSize,",
		  "    });",
		  "  }",
		  "",
		  "  onSearchClear() {",
		  "    this.searchKeyCtrl.setValue('');",
		  "  }",
		  "",
		  "  /**",
		  "   * Add New ${1/(.)/${1:/capitalize}/}",
		  "   */",
		  "  add${1/(.)/${1:/capitalize}/}() {",
		  "    const dialogRef = this.dialog.open(Form${1/(.)/${1:/capitalize}/}Component, {",
		  "      width: '600px',",
		  "      disableClose: true,",
		  "      panelClass: 'dialog-container',",
		  "      direction: this.dir,",
		  "      maxWidth: '90vw',",
		  "    });",
		  "    dialogRef.afterClosed().subscribe((result) => {",
		  "      if (result) {",
		  "        this.snackbarService.openSnackBar('Added', 'success');",
		  "        this.loadPage();",
		  "      }",
		  "      this.editRowIndex = -1;",
		  "    });",
		  "  }",
		  "",
		  "  /**",
		  " * edit ${1/(.)/${1:/downcase}/}",
		  " * @param ${1/(.)/${1:/downcase}/}Id ${1/(.)/${1:/downcase}/} id",
		  " * @param index index row",
		  " */",
		  "  edit${1/(.)/${1:/capitalize}/}(${1/(.)/${1:/downcase}/}Id: string, index: number) {",
		  "    this.editRowIndex = index;",
		  "    const dialogRef = this.dialog.open(Form${1/(.)/${1:/capitalize}/}Component, {",
		  "      width: '600px',",
		  "      disableClose: true,",
		  "      panelClass: 'dialog-container',",
		  "      data: { ${1/(.)/${1:/downcase}/}Id: +${1/(.)/${1:/downcase}/}Id },",
		  "      direction: this.dir,",
		  "      maxWidth: '90vw',",
		  "    });",
		  "",
		  "    dialogRef.afterClosed().subscribe((result) => {",
		  "      if (result) {",
		  "        this.snackbarService.openSnackBar('Updated', 'success');",
		  "        this.loadPage();",
		  "      }",
		  "      this.editRowIndex = -1;",
		  "    });",
		  "  }",
		  "",
		  "  deleteRecord(${1/(.)/${1:/downcase}/}Id: string, index: number): void {",
		  "    this.editRowIndex = index;",
		  "    const dialogRef = this.dialogSC.openConfirmDialog({ message: 'Are you sure to delete this record?', });",
		  "    dialogRef.afterClosed().subscribe((result) => {",
		  "      if (result) {",
		  "        this.${2/(.)/${1:/downcase}/}Service.delete${1/(.)/${1:/capitalize}/}(${1/(.)/${1:/downcase}/}Id)",
		  "          .pipe(",
		  "            finalize(() => { this.editRowIndex = -1; }),",
		  "            takeUntil(this._componentDestroyed)",
		  "          )",
		  "          .subscribe((res) => {",
		  "            this.snackbarService.openSnackBar(this.deletedMsg, 'success');",
		  "            this.loadPage();",
		  "          });",
		  "      } else {",
		  "        this.editRowIndex = -1;",
		  "      }",
		  "    });",
		  "  }",
		],
		"description": "ramez-list-component"
	  },
	  "ramez-form-ts-component": {
		"prefix": "ramez-form-ts-component",
		"body": [
		  "  ${1/(.)/${1:/downcase}/}Id: string | undefined;",
		  "  isEdit: boolean = false;",
		  "  addedMsg: string = '';",
		  "  updatedMsg: string = '';",
		  "  invalidFieldsMsg: string = '';",
		  "  ${1/(.)/${1:/downcase}/}Form: FormGroup = this.fb.group({",
		  "  ${3:InputSettings}",
		  "\t\t\tcode: [''],",
		  "\t\t\tname: ['', [Validators.required, Validators.maxLength(20)]],",
		  "\t\t\tnameAr: ['', [Validators.required, Validators.maxLength(20)]]",
		  "  });",
		  "  isSubmitted: boolean = false;",
		  "  ${1/(.)/${1:/downcase}/}Info$!: Observable<ApiResponse<I${1:SingularEntityName}Response>>;",
		  "",
		  "  constructor(private fb: FormBuilder, private dialogRef: MatDialogRef<Form${1/(.)/${1:/capitalize}/}Component>, private translate: TranslateService,",
		  "    private snackbar: SnackbarService, private ${2/(.)/${1:/downcase}/}Service: ${2:PluralEntityName}Service,",
		  "    @Inject(MAT_DIALOG_DATA) public data: { ${1/(.)/${1:/downcase}/}Id?: string }) {",
		  "    this.${1/(.)/${1:/downcase}/}Id = data?.${1/(.)/${1:/downcase}/}Id;",
		  "    this.isEdit = this.${1/(.)/${1:/downcase}/}Id == null || undefined || '' ? false : true;",
		  "  }",
		  "",
		  "  ngOnInit(): void {",
		  "    if (this.isEdit)",
		  "      this.fillEditForm();",
		  "",
		  "    this.translate.get(['Successfully Added', 'Successfully Updated', 'Common.Data.Invalid'])",
		  "      .subscribe((translations) => {",
		  "        this.addedMsg = translations['Successfully Added'];",
		  "        this.updatedMsg = translations['Successfully Updated'];",
		  "        this.invalidFieldsMsg = translations['Common.Data.Invalid'];",
		  "      });",
		  "  }",
		  "",
		  "  formData<ReturnType>(): ReturnType {",
		  "    return this.${1/(.)/${1:/downcase}/}Form.value as ReturnType;",
		  "  }",
		  "",
		  "  fillEditForm() {",
		  "    this.${1/(.)/${1:/downcase}/}Info$ = this.${2/(.)/${1:/downcase}/}Service.get${1/(.)/${1:/capitalize}/}(this.${1/(.)/${1:/downcase}/}Id ?? '').pipe(",
		  "      tap((result) => {",
		  "        if (result.data) { this.${1/(.)/${1:/downcase}/}Form.patchValue(result.data); }",
		  "      })",
		  "    );",
		  "  }",
		  "",
		  "  get formValidator(): { [key: string]: AbstractControl; } {",
		  "    return this.${1/(.)/${1:/downcase}/}Form.controls;",
		  "  }",
		  "",
		  "  onSubmit() {",
		  "    if (this.${1/(.)/${1:/downcase}/}Form.invalid) {",
		  "      this.${1/(.)/${1:/downcase}/}Form.markAllAsTouched();",
		  "      this.snackbar.openSnackBar(this.invalidFieldsMsg ?? 'Fill Required Fields', 'warning');",
		  "      this.isSubmitted = false;",
		  "      return;",
		  "    }",
		  "    this.isSubmitted = true;",
		  "    //Insert as new",
		  "    if (!this.isEdit) {",
		  "      this.${2/(.)/${1:/downcase}/}Service",
		  "        .create${1/(.)/${1:/capitalize}/}(this.formData<I${1/(.)/${1:/capitalize}/}Create>())",
		  "        .pipe(finalize(() => (this.isSubmitted = false)))",
		  "        .subscribe((res) => {",
		  "          this.dialogRef.close(true);",
		  "        });",
		  "    } else {",
		  "      this.${2/(.)/${1:/downcase}/}Service",
		  "        .update${1/(.)/${1:/capitalize}/}(this.${1/(.)/${1:/downcase}/}Id ?? '', this.formData<I${1/(.)/${1:/capitalize}/}Update>())",
		  "        .pipe(finalize(() => (this.isSubmitted = false)))",
		  "        .subscribe((res) => {",
		  "          this.dialogRef.close(true);",
		  "        });",
		  "    }",
		  "  }"
		],
		"description": "ramez-form-ts-component"
	  },
	  "ramez-form-data-and-fixed-values": {
		"prefix": "ramez-form-data-and-fixed-values",
		"body": [
		  "  formData<ReturnType>(): ReturnType {",
		  "    var returnValue = this.employeeMasterForm.value as ReturnType;",
		  "    return Object.assign(returnValue as {}, {",
		  "      empDob: this.datePipe.transform(this.employeeMasterForm.controls['empDob'].value, 'yyyy-MM-dd'),",
		  "    } as object) as ReturnType;",
		  "  }"
		],
		"description": "ramez-form-data-and-fixed-values"
	  }, 
	  "ramez-table-expand-row-animations": {
		"prefix": "ramez-table-expand-row-animations",
		"body": [
		  "animations: [",
		  "  trigger('detailExpand', [",
		  "    state('collapsed', style({ height: '0px', minHeight: '0' })),",
		  "    state('expanded', style({ height: '*' })),",
		  "    transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),",
		  "  ]),",
		  "],"
		],
		"description": "ramez table expand row animations"
	  },
	  "ramez-filters-list-codes": {
		"prefix": "ramez-filters-list-codes",
		"body": [
		  "// Filters Options ------------------------",
		  "/* ",
		  " # In LoadPage Function Replace With this Code:",
		  " query: Object.assign({ name: this.searchKeyCtrl.value ?? '' }, this.filterData()),",
		  "*/",
		  "@ViewChild(MatMenuTrigger, { static: false }) filterMenu!: MatMenuTrigger;",
		  "filterItemCount!: number;",
		  "formFilter: FormGroup = new FormGroup({",
		  "  filterValues: new FormControl({",
		  "    // ${2:fields Names}",
		  "    name: [null],",
		  "    code: [null],",
		  "    list: [null],",
		  "  }),",
		  "});",
		  "",
		  "filterData(): I${1:SingularEntityName}Filter {",
		  "  var returnValue = this.formFilter.get('filterValues')?.value as I${1/(.)/${1:/capitalize}/}Filter;",
		  "  return Object.assign(returnValue as {}, {",
		  "  } as object) as I${1/(.)/${1:/capitalize}/}Filter;",
		  "}",
		  "",
		  "getFilterCount(count: any) {",
		  "  this.filterItemCount = count;",
		  "}",
		  "",
		  "applyMenuFilter(eventVal: any) {",
		  "  //alert(eventVal);",
		  "  this.paginator.pageIndex = 0;",
		  "  this.loadPage();",
		  "  this.filterMenu.closeMenu();",
		  "}"
		],
		"description": "ramez-filters-list-codes"
	  },
	  "ramez-filters-defualt-module": {
		"prefix": "ramez-filters-defualt-module",
		"body": [
		  "const MATCOMPONENTS = [",
		  "  MatCardModule,",
		  "  MatDividerModule,",
		  "  MatButtonModule,",
		  "  MatSelectModule,",
		  "  MatDatepickerModule,",
		  "  MatProgressSpinnerModule,",
		  "];",
		  "@NgModule({",
		  "  declarations: [${1:SingularEntityName}FiltersComponent],",
		  "  imports: [",
		  "    CommonModule,",
		  "    ReactiveFormsModule,",
		  "    TranslateModule,",
		  "    FlexLayoutModule,",
		  "    MATCOMPONENTS,",
		  "    MatIconModule,",
		  "    MatFormFieldModule,",
		  "    MatInputModule",
		  "  ],",
		  "  exports: [${1/(.)/${1:/capitalize}/}FiltersComponent, MATCOMPONENTS],",
		  "})",
		  "export class ${1/(.)/${1:/capitalize}/}FiltersModule { }"
		],
		"description": "ramez-filters-defualt-module"
	  },
	  "ramez-filters-form-codes": {
		"prefix": "ramez-filters-form-codes",
		"body": [
		  "@Component({",
		  "  selector: 'app-${1/(.*)/${1:/downcase}/}-filters',",
		  "  templateUrl: './${1/(.*)/${1:/downcase}/}-filters.component.html',",
		  "  styleUrls: ['./${1/(.*)/${1:/downcase}/}-filters.component.scss'],",
		  "  providers: [",
		  "    {",
		  "      provide: NG_VALUE_ACCESSOR,",
		  "      multi: true,",
		  "      useExisting: ${1/(.)/${1:/capitalize}/}FiltersComponent,",
		  "    },",
		  "    DatePipe,",
		  "    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },",
		  "    {",
		  "      provide: DateAdapter,",
		  "      useClass: MomentDateAdapter,",
		  "      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],",
		  "    },",
		  "  ],",
		  "})",
		  "export class ${1:SingularEntityName}FiltersComponent implements OnInit {",
		  "  _componentDestroyed = new Subject<any>();",
		  "  onTouched = () => { };",
		  "",
		  "  onChangeSubs: Subscription[] = [];",
		  "  form: FormGroup = this.fb.group({",
		  "    // ${2:fields Names}",
		  "    name: [null],",
		  "    code: [null],",
		  "    list: [null],",
		  "  });",
		  "",
		  "  @Output() filterCount = new EventEmitter<number | null>();",
		  "  @Output() applyFilter = new EventEmitter<boolean | null>();",
		  "",
		  "  constructor(private fb: FormBuilder) { }",
		  "",
		  "  ngOnInit(): void {",
		  "",
		  "  }",
		  "",
		  "  ngAfterViewInit() { }",
		  "",
		  "  ngOnDestroy() {",
		  "    for (let sub of this.onChangeSubs) {",
		  "      sub.unsubscribe();",
		  "    }",
		  "  }",
		  "",
		  "  get formValidator(): { [key: string]: AbstractControl; } {",
		  "    return this.form.controls;",
		  "  }",
		  "",
		  "  resetForm() {",
		  "    this.form.reset();",
		  "    this.applyFilter.emit(false);",
		  "  }",
		  "",
		  "  applyFilterClose() {",
		  "    this.applyFilter.emit(true);",
		  "  }",
		  "",
		  "  private _filterFields() {",
		  "    let count: number = 0;",
		  "    let haveValue: boolean = false;",
		  "    Object.keys(this.form.controls).forEach((key) => {",
		  "      if (",
		  "        this.form?.get(key)?.value != null &&",
		  "        this.form?.get(key)?.value != ''",
		  "      ) {",
		  "        count += 1;",
		  "        haveValue = true;",
		  "      }",
		  "    });",
		  "    if (haveValue) this.filterCount.emit(count);",
		  "    else this.filterCount.emit(null);",
		  "  }",
		  "",
		  "  registerOnChange(onChangeFn: any) {",
		  "    const sub = this.form.valueChanges",
		  "      .pipe(",
		  "        tap((params: any) => {",
		  "          this._filterFields();",
		  "        })",
		  "      ).subscribe(onChangeFn);",
		  "    this.onChangeSubs.push(sub);",
		  "  }",
		  "",
		  "  writeValue(value: any) {",
		  "    if (value) {",
		  "      this.form.setValue(value, { emitEvent: false });",
		  "    }",
		  "  }",
		  "",
		  "  registerOnTouched(onTouched: any) {",
		  "    this.onTouched = onTouched;",
		  "  }",
		  "",
		  "  setDisabledState(disabled: boolean) {",
		  "    if (disabled) {",
		  "      this.form.disable();",
		  "    } else {",
		  "      this.form.enable();",
		  "    }",
		  "  }",
		  "",
		  "}",
		  ""
		],
		"description": "ramez-filters-form-codes"
	  },
	  "ramez-resolver-form-component": {
		"prefix": "ramez-resolver-form-component",
		"body": [
		  "  @ViewChild('mainAccordion') mainAccordion!: MatAccordion;",
		  "  ${2/(.)/${1:/downcase}/}Id: string | undefined;",
		  "",
		  "  isEdit: boolean = false;",
		  "  addedMsg: string = '';",
		  "  updatedMsg: string = '';",
		  "  invalidFieldsMsg: string = '';",
		  "  NoDataReceivedMsg: string = '';",
		  "  ${2/(.)/${1:/downcase}/}Form: FormGroup = this.fb.group({",
		  "    // ${3:InputFields}",
		  "    id: [''],",
		  "    name: ['', [Validators.required, Validators.maxLength(30)]],",
		  "  });",
		  "  isSubmitted: boolean = false;",
		  "  ${2/(.)/${1:/downcase}/}Info$!: Observable<ApiResponse<I${2:SingularEntityNameDowncase}Response>>;",
		  "  resolverData$!: Observable<Data>;",
		  "",
		  "  constructor(private fb: FormBuilder, private translate: TranslateService,",
		  "    private router: Router, private route: ActivatedRoute, private snackbar: SnackbarService,",
		  "    private ${1/(.)/${1:/downcase}/}Service: ${1:PluralEntityName}Service) {",
		  "    this.${2/(.)/${1:/downcase}/}Id = this.route.snapshot.params['id'];",
		  "    this.isEdit = this.${2/(.)/${1:/downcase}/}Id == null || undefined || '' ? false : true;",
		  "  }",
		  "",
		  "  ngOnInit(): void {",
		  "    if (this.isEdit)",
		  "      this.fillEditForm();",
		  "",
		  "    this.translate.get(['Successfully Added', 'Successfully Updated', 'Common.Data.Invalid', 'Common.Messages.DataLoadingFailed'])",
		  "      .subscribe((translations) => {",
		  "        this.addedMsg = translations['Successfully Added'];",
		  "        this.updatedMsg = translations['Successfully Updated'];",
		  "        this.invalidFieldsMsg = translations['Common.Data.Invalid'];",
		  "        this.NoDataReceivedMsg = translations['Common.Messages.DataLoadingFailed'];",
		  "      });",
		  "  }",
		  "",
		  "  formData<ReturnType>(): ReturnType {",
		  "    return this.${2/(.)/${1:/downcase}/}Form.value as ReturnType;",
		  "  }",
		  "",
		  "  fillEditForm() {",
		  "    this.resolverData$ = this.route.data.pipe(",
		  "      tap((res) => {",
		  "        let prop = res['prop'] as ApiResponse<I${2/(.)/${1:/capitalize}/}Response>;",
		  "        this.${2/(.)/${1:/downcase}/}Info$ = of(prop)",
		  "        if (!prop.data) {",
		  "          this.snackbar.openSnackBar(this.NoDataReceivedMsg ?? 'No Data Received', 'warning');",
		  "          this.backToPage();",
		  "          return;",
		  "        } else {",
		  "          this.patchValue(prop.data);",
		  "        }",
		  "      })",
		  "    );",
		  "    this.resolverData$.subscribe();",
		  "  }",
		  "",
		  "  loadData(id: string | null | undefined) {",
		  "    if (id == null || id == undefined) return;",
		  "    this.${1/(.)/${1:/downcase}/}Service.get${2/(.)/${1:/capitalize}/}(id).pipe(",
		  "      tap((result) => {",
		  "        if (result.data) {",
		  "          this.${2/(.)/${1:/downcase}/}Info$ = of(result);",
		  "          this.patchValue(result.data);",
		  "        }",
		  "      })",
		  "    );",
		  "  }",
		  "",
		  "  patchValue(value: I${2/(.)/${1:/capitalize}/}Response) {",
		  "    if (value) { this.${2/(.)/${1:/downcase}/}Form.patchValue(value); }",
		  "  }",
		  "",
		  "  get formValidator(): { [key: string]: AbstractControl; } {",
		  "    return this.${2/(.)/${1:/downcase}/}Form.controls;",
		  "  }",
		  "",
		  "  backToPage() {",
		  "    this.router.navigate(['/dashboard/training-master/list']);",
		  "  }",
		  "",
		  "  onSubmit() {",
		  "    if (this.${2/(.)/${1:/downcase}/}Form.invalid) {",
		  "      this.${2/(.)/${1:/downcase}/}Form.markAllAsTouched();",
		  "      this.snackbar.openSnackBar(this.invalidFieldsMsg ?? 'Fill Required Fields', 'warning');",
		  "      this.isSubmitted = false;",
		  "      return;",
		  "    }",
		  "    this.isSubmitted = true;",
		  "    //Insert as new",
		  "    if (!this.isEdit) {",
		  "      this.${1/(.)/${1:/downcase}/}Service",
		  "        .create${2/(.)/${1:/capitalize}/}(this.formData<I${2/(.)/${1:/capitalize}/}Create>())",
		  "        .pipe(finalize(() => (this.isSubmitted = false)))",
		  "        .subscribe((res) => {",
		  "          this.snackbar.openSnackBar(this.addedMsg ?? 'Success', 'success');",
		  "          return;",
		  "        });",
		  "    } else {",
		  "      this.${1/(.)/${1:/downcase}/}Service",
		  "        .update${2/(.)/${1:/capitalize}/}(this.${2/(.)/${1:/downcase}/}Id ?? '', this.formData<I${2/(.)/${1:/capitalize}/}Update>())",
		  "        .pipe(finalize(() => (this.isSubmitted = false)))",
		  "        .subscribe((res) => {",
		  "          this.snackbar.openSnackBar(this.addedMsg ?? 'Success', 'success');",
		  "          return;",
		  "        });",
		  "    }",
		  "  }",
		  "",
		],
		"description": "ramez-resolver-form-component"
	  },
	  "ramez-resolver-route-path": {
		"prefix": "ramez-resolver-route-path",
		"body": [
		  "{",
		  "  path: ':id/details',",
		  "  data: {",
		  "    title: (data: any) =>",
		  "      `${(data?.prop?.data?.${23:PropertyName}) || '${1/(.)/${1:/capitalize}/} Details'}`,",
		  "  },",
		  "  component: Modify${1:SingularEntityNameCapitalize}Component,",
		  "  resolve: { prop: ${1/(.)/${1:/capitalize}/}Resolver },",
		  "},"
		],
		"description": "ramez-resolver-route-path"
	  }, 
	  "ramez-list-data-source-builder": {
		"prefix": "ramez-list-data-source-builder",
		"body": [
		  "data: IKeyValuePair<string, string>[] = [",
		  "  { key: '1', value: '${1:SingularEntityNameCapitalize}.Types.Leave' },",
		  "  { key: '2', value: '${1/(.)/${1:/capitalize}/}.Types.Terminated' },",
		  "  { key: '3', value: '${1/(.)/${1:/capitalize}/}.Types.Resigned' },",
		  "];",
		  "",
		  "getDescription(key: string | null) {",
		  "  if (key == null) return \"\";",
		  "  let result = this.data.find(e => e.key == key.trim());",
		  "  return result ? result.value : \"\";",
		  "}",
		],
		"description": "ramez-list-data-source-builder"
	  },
	  "ramez-interface-extends-key-value-pair": {
		"prefix": "ramez-interface-extends-key-value-pair",
		"body": [
		  "extends IKeyValuePair<string, string> { }",
		],
		"description": "ramez-interface-extends-key-value-pair"
	  },
	  "ramez-providers-datePipe": {
		"prefix": "ramez-providers-datePipe",
		"body": [
		  "  providers: [",
		  "    DatePipe,",
		  "    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },",
		  "    {",
		  "      provide: DateAdapter,",
		  "      useClass: MomentDateAdapter,",
		  "      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],",
		  "    },",
		  "  ],"
		],
		"description": "ramez-providers-datePipe"
	  },
	  "ramez-change-status-service-function": {
		"prefix": "ramez-change-status-service-function",
		"body": [
		  "changeActiveStatus(id: string, newStatus: boolean): Observable<ApiResponse<boolean>> {",
		  "  const headers = new HttpHeaders({ 'Content-Type': 'application/json' });",
		  "  return this.http.put<ApiResponse<boolean>>(`${this.${1:PluralEntityNameDownCase}Url}/\\${id}/EnabledStatuses`, newStatus, { headers: headers } );",
		  "}"
		],
		"description": "ramez-change-status-service-function"
	  },
	  "ramez-change-status-submit-function": {
		"prefix": "ramez-change-status-submit-function",
		"body": [
		  "changeActiveStatus(record: I${1:SingularEntityNameUpperCase}Response, index: number) {",
		  "  this.editRowIndex = index;",
		  "  const dialogRef = this.dialogSC.openConfirmDialog({ message: this.changeStatusMsg });",
		  "  dialogRef.afterClosed().subscribe((result) => {",
		  "    if (result) {",
		  "      this.${2:PluralEntityNameDownCase}Service.changeActiveStatus(record.id, record.isDisabled)",
		  "        .pipe(",
		  "          finalize(() => { this.editRowIndex = -1; }),",
		  "          takeUntil(this._componentDestroyed)",
		  "        )",
		  "        .subscribe((res) => {",
		  "          this.snackbarService.openSnackBar(this.updatedMsg, 'success');",
		  "          record.isDisabled = res.data as boolean;",
		  "        });",
		  "    } else {",
		  "      this.editRowIndex = -1;",
		  "    }",
		  "  });",
		  "}"
		],
		"description": "ramez-change-status-submit-function"
	  },
	  "ramez-change-status-column": {
		"prefix": "ramez-change-status-messages",
		"body": [
		  "this.updatedMsg = translations['Successfully Updated'];",
		  "this.changeStatusMsg = translations['Common.Messages.AreYouSureToChangeStatus'];"
		],
		"description": "ramez-change-status-messages"
	  },
	  "ramez-dropdownlist-selection-change": {
		"prefix": "ramez-dropdownlist-selection-change",
		"body": [
		  "on${1:PropertyNameUppercase}SelectionChanged(selectedValue: I${1/(.)/${1:/capitalize}/}Response, event: any) {",
		  "  if (event.isUserInput) {    // ignore on deselection of the previous option",
		  "    if (selectedValue && selectedValue.id.length > 0) {",
		  "      this.${2:FormNameDowncase}Form.controls['nameEn'].setValue(selectedValue.nameEn);",
		  "    }",
		  "    this.${2/(.)/${1:/downcase}/}Form.updateValueAndValidity();",
		  "  }",
		  "}"
		],
		"description": "ramez-dropdownlist-selection-change"
	  }
}